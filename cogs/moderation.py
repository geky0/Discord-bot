# -*- coding: utf-8 -*-
"""cogs/moderation.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKwArhQBo3N1jgB_Bf8mOzvyK4TJiiBS
"""

# cogs/moderation.py

import discord
from discord.ext import commands
from datetime import timedelta
from config import LOG_CHANNEL_ID, OWNER_ID, SPOILER_CHECK_CHANNELS
import asyncio

class ModerationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # Make the lockdown flag a bot attribute for global access
        self.bot.is_locked_down = False

    async def delete_command_message(self, ctx):
        try:
            await ctx.message.delete()
        except discord.Forbidden:
            print(f"DEBUG: Bot lacks permission to delete message in {ctx.channel.name} ({ctx.channel.id})")
        except discord.HTTPException as e:
            print(f"DEBUG: An error occurred while deleting message: {e}")

    # --- MODERATION COMMANDS ---

    @commands.hybrid_command(name='kick', description='Kicks a specified member from the server.')
    @commands.has_permissions(kick_members=True)
    async def kick(self, ctx, member: discord.Member, *, reason: str = None):
        """Kicks a specified member from the server."""
        try:
            if member.id == ctx.guild.owner_id or member.top_role >= ctx.guild.me.top_role:
                await ctx.send("I cannot kick this member as they have higher or equal permissions than me.")
                return

            await member.kick(reason=reason)
            await ctx.send(f'{member.mention} has been kicked. Reason: {reason or "No reason provided."}')
        except discord.Forbidden:
            await ctx.send("I don't have the necessary permissions to kick this user.")
        except Exception as e:
            await ctx.send(f'An error occurred: {e}')

    @kick.error
    async def kick_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Please specify a member to kick. Example: `!kick @user`")
        elif isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use this command.")

    @commands.hybrid_command(name='ban', description='Bans a specified member from the server.')
    @commands.has_permissions(ban_members=True)
    async def ban(self, ctx, member: discord.Member, *, reason: str = None):
        """Bans a specified member from the server."""
        try:
            if member.id == ctx.guild.owner_id or member.top_role >= ctx.guild.me.top_role:
                await ctx.send("I cannot ban this member as they have higher or equal permissions than me.")
                return

            await member.ban(reason=reason)
            await ctx.send(f'{member.mention} has been banned. Reason: {reason or "No reason provided."}')
        except discord.Forbidden:
            await ctx.send("I don't have the necessary permissions to ban this user.")
        except Exception as e:
            await ctx.send(f'An error occurred: {e}')

    @ban.error
    async def ban_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Please specify a member to ban. Example: `/ban @user`")
        elif isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use this command.")

    @commands.hybrid_command(name='unban', description='Unbans a user by their name#discriminator or ID.')
    @commands.has_permissions(ban_members=True)
    async def unban(self, ctx, *, member: str):
        """Unbans a specified member by their name or ID."""
        banned_users = [ban async for ban in ctx.guild.bans()]
        member_name, member_discriminator = (member.split('#') if '#' in member else (member, None))

        for ban_entry in banned_users:
            user = ban_entry.user
            if (user.name == member_name and (user.discriminator == member_discriminator or member_discriminator is None)) or str(user.id) == member:
                await ctx.guild.unban(user)
                await ctx.send(f'Unbanned {user.mention}')
                return

        await ctx.send(f"Could not find a banned user named '{member}'.")

    @unban.error
    async def unban_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Please specify a user to unban. Example: `/unban username#1234` or `/unban 1234567890`")
        elif isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use this command.")

    @commands.hybrid_command(name='purge', description='Deletes a specified number of messages.')
    @commands.has_permissions(manage_messages=True)
    async def purge(self, ctx, amount: int):
        """Deletes a specified number of messages from the channel."""
        if amount <= 0:
            await ctx.send("Please specify a number greater than 0.")
            return

        await ctx.channel.purge(limit=amount + 1)
        msg = await ctx.send(f'Purged {amount} messages.')
        await asyncio.sleep(5)
        await msg.delete()

    @purge.error
    async def purge_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Please specify the number of messages to delete. Example: `/purge 10`")
        elif isinstance(error, commands.BadArgument):
            await ctx.send("Please enter a valid number.")
        elif isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use this command.")

    @commands.hybrid_command(name='mute', description='Mutes a specified member.')
    @commands.has_permissions(manage_roles=True)
    async def mute(self, ctx, member: discord.Member, *, reason: str = None):
        """Mutes a specified member by adding a 'Muted' role."""
        muted_role = discord.utils.get(ctx.guild.roles, name='Muted')

        if not muted_role:
            try:
                muted_role = await ctx.guild.create_role(name='Muted')
                await ctx.send(f'Created a new role named `{muted_role.name}`. Please edit its permissions to deny '
                               'users from sending messages in your desired channels.')
            except discord.Forbidden:
                await ctx.send("I don't have permission to create roles.")
                return

        if muted_role in member.roles:
            await ctx.send(f'{member.mention} is already muted.')
            return

        try:
            await member.add_roles(muted_role, reason=reason)
            await ctx.send(f'{member.mention} has been muted. Reason: {reason or "No reason provided."}')
        except discord.Forbidden:
            await ctx.send("I don't have the necessary permissions to add roles to this user.")
        except Exception as e:
            await ctx.send(f'An error occurred: {e}')

    @mute.error
    async def mute_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Please specify a member to mute. Example: `/mute @user`")
        elif isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use this command.")

    @commands.hybrid_command(name='unmute', description='Unmutes a specified member.')
    @commands.has_permissions(manage_roles=True)
    async def unmute(self, ctx, member: discord.Member):
        """Unmutes a specified member by removing the 'Muted' role."""
        muted_role = discord.utils.get(ctx.guild.roles, name='Muted')

        if not muted_role:
            await ctx.send("The 'Muted' role does not exist.")
            return

        if muted_role not in member.roles:
            await ctx.send(f'{member.mention} is not muted.')
            return

        try:
            await member.remove_roles(muted_role)
            await ctx.send(f'{member.mention} has been unmuted.')
        except discord.Forbidden:
            await ctx.send("I don't have the necessary permissions to remove roles from this user.")
        except Exception as e:
            await ctx.send(f'An error occurred: {e}')

    @unmute.error
    async def unmute_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Please specify a member to unmute. Example: `/unmute @user`")
        elif isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use this command.")

    @commands.hybrid_command(name='warn')
    @commands.is_owner()
    async def warn(self, ctx, member: discord.Member, *, reason: str):
        """Warns a member and times them out after 5 warnings."""
        await self.delete_command_message(ctx)

        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)

        try:
            await member.send(f'You have been warned for: {reason}')
            await ctx.send(f'{member.mention} has been warned for: {reason}')

            self.bot.user_warnings[member.id] = self.bot.user_warnings.get(member.id, 0) + 1
            warnings_count = self.bot.user_warnings[member.id]

            await ctx.send(f'{member.mention} now has {warnings_count} warnings.')

            if warnings_count >= 5:
                timeout_duration = timedelta(minutes=10)
                await member.timeout(timeout_duration, reason="Accumulated 5 warnings")
                if log_channel:
                    await log_channel.send(f'üî¥ {member.mention} has been timed out for 10 minutes due to accumulating 5 warnings.')
                self.bot.user_warnings[member.id] = 0
        except discord.Forbidden:
            await ctx.send(f"‚ùå I don't have permission to send a DM to {member.mention} or timeout them.")
        except Exception as e:
            await ctx.send(f"‚ùå An error occurred while trying to warn {member.mention}: {e}")

    # --- NEW SAFETY FEATURES ---

    @commands.hybrid_command(name='lockdown', description='Locks down the server, preventing everyone from sending messages.')
    @commands.has_permissions(administrator=True)
    async def lockdown(self, ctx):
        """Locks down the server, preventing all members from sending messages."""
        if self.bot.is_locked_down:
            await ctx.send("The server is already in lockdown mode.")
            return

        # Deny send messages permission for the @everyone role
        everyone_role = ctx.guild.default_role
        lockdown_overwrite = discord.PermissionOverwrite(send_messages=False, add_reactions=False)

        # Store original overwrites to revert later
        self.bot.original_overwrites = {}
        for channel in ctx.guild.text_channels:
            original_overwrite = channel.overwrites_for(everyone_role)
            self.bot.original_overwrites[channel.id] = original_overwrite
            await channel.set_permissions(everyone_role, overwrite=lockdown_overwrite)

        self.bot.is_locked_down = True

        embed = discord.Embed(
            title="üîí Server Lockdown",
            description="The server has been locked down by an administrator. Only staff can send messages.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üîí Server lockdown initiated by {ctx.author.mention}.")

    @commands.hybrid_command(name='unlock', description='Unlocks the server, allowing members to send messages again.')
    @commands.has_permissions(administrator=True)
    async def unlock(self, ctx):
        """Unlocks the server, allowing all members to send messages again."""
        if not self.bot.is_locked_down:
            await ctx.send("The server is not currently in lockdown mode.")
            return

        # Revert permissions for the @everyone role
        everyone_role = ctx.guild.default_role

        for channel in ctx.guild.text_channels:
            # Revert to original overwrites if available, otherwise set to default
            original_overwrite = self.bot.original_overwrites.get(channel.id)
            if original_overwrite:
                await channel.set_permissions(everyone_role, overwrite=original_overwrite)
            else:
                await channel.set_permissions(everyone_role, overwrite=None)

        self.bot.is_locked_down = False
        self.bot.original_overwrites = {}

        embed = discord.Embed(
            title="üîì Server Unlocked",
            description="The server is now unlocked. Members can send messages again.",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üîì Server unlocked by {ctx.author.mention}.")

    @commands.Cog.listener()
    async def on_message(self, message):
        """Event listener for messages to handle locked channels and spoilers."""
        if message.author == self.bot.user:
            return

        # Handle messages in locked channels
        if message.channel.id in self.bot.locked_channels:
            channel_type = self.bot.locked_channels[message.channel.id]
            is_valid = True

            if channel_type == "numbers":
                if not message.content.isdigit():
                    is_valid = False
            elif channel_type == "letters":
                if not message.content.isalpha():
                    is_valid = False

            if not is_valid:
                await message.delete()
                await message.channel.send(f"‚ùå This channel is locked to **{channel_type} only**.", delete_after=5)

        # Check for spoiler content in specific channels
        if message.channel.id in SPOILER_CHECK_CHANNELS:
            if not (any(attachment.is_spoiler() for attachment in message.attachments) or \
                    any("||" in msg_part for msg_part in message.content.split())):
                try:
                    await message.delete()
                    await message.channel.send(f"‚ùå Please use spoilers for all images/files in this channel.", delete_after=5)
                except discord.Forbidden:
                    print(f"DEBUG: Bot lacks permission to delete a message in {message.channel.name}")


async def setup(bot):
    await bot.add_cog(ModerationCog(bot))