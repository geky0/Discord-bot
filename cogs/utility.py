# -*- coding: utf-8 -*-
"""cogs/utility.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SIMypQAZvD7DtQ-Hgck4H_CVu2ZGU7G5
"""

# cogs/utility.py

import discord
from discord.ext import commands
from discord.ui import Modal, TextInput, Button, View
from config import (
    LOG_CHANNEL_ID,
    UPDATE_CHANNEL_ID,
    ANONYMOUS_CHANNEL_ID,
    SUGGESTION_CHANNEL_ID,
    INTRO_TEMPLATE_TEXT
)
from datetime import datetime
import asyncio

class UtilityCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def delete_command_message(self, ctx):
        try:
            await ctx.message.delete()
        except discord.Forbidden:
            print(f"DEBUG: Bot lacks permission to delete message in {ctx.channel.name} ({ctx.channel.id})")
        except discord.HTTPException as e:
            print(f"DEBUG: An error occurred while deleting message: {e}")

    # ---------- ANONYMOUS MESSAGE MODAL AND BUTTON CLASSES ----------

    class AnonymousModal(Modal, title="Send an Anonymous Message"):
        anonymous_text = TextInput(
            label="Your Anonymous Message",
            style=discord.TextStyle.paragraph,
            placeholder="Type your anonymous message here...",
            required=True,
            max_length=1000
        )

        async def on_submit(self, interaction: discord.Interaction):
            anonymous_channel = self.view.bot.get_channel(ANONYMOUS_CHANNEL_ID)
            log_channel = self.view.bot.get_channel(LOG_CHANNEL_ID)

            if not anonymous_channel:
                if log_channel:
                    await log_channel.send(f"‚ùå Anonymous channel with ID {ANONYMOUS_CHANNEL_ID} not found.")
                await interaction.response.send_message("‚ùå The anonymous channel is not configured correctly. Please contact an admin.", ephemeral=True)
                return

            anon_message_content = self.anonymous_text.value
            anon_embed = discord.Embed(
                title="An Anonymous Message",
                description=anon_message_content,
                color=discord.Color.dark_grey()
            )

            try:
                await anonymous_channel.send(embed=anon_embed)
                if log_channel:
                    await log_channel.send(f"üìù Anonymous message submitted by {interaction.user.display_name} (ID: {interaction.user.id}) to {anonymous_channel.mention}.")
                await interaction.response.send_message("‚úÖ Your anonymous message has been sent.", ephemeral=True)
            except discord.Forbidden:
                if log_channel:
                    await log_channel.send(f"‚ùå Bot lacks permission to send anonymous message to {anonymous_channel.mention}.")
                await interaction.response.send_message("‚ùå I don't have permission to send messages in the anonymous channel. Please contact an admin.", ephemeral=True)
            except Exception as e:
                if log_channel:
                    await log_channel.send(f"‚ùå An error occurred while sending anonymous message to {anonymous_channel.mention}: {e}")
                await interaction.response.send_message(f"‚ùå An error occurred while sending your anonymous message. Please try again later.", ephemeral=True)

    class AnonymousFormButton(Button):
        def __init__(self):
            super().__init__(label="Send Anonymous Message", style=discord.ButtonStyle.secondary, custom_id="send_anonymous_message")

        async def callback(self, interaction: discord.Interaction):
            await interaction.response.send_modal(self.view.AnonymousModal(self.view))

    class AnonymousPromptView(View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(self.AnonymousFormButton())

    # ---------- COPY INTRO BUTTON AND VIEW ----------

    class CopyIntroButton(Button):
        def __init__(self):
            super().__init__(label="Copy Format", style=discord.ButtonStyle.primary, custom_id="copy_intro_format")

        async def callback(self, interaction: discord.Interaction):
            await interaction.response.send_message(
                f"```\n{INTRO_TEMPLATE_TEXT.strip()}\n```\n"
                "üëÜ Copy the text above! üëÜ",
                ephemeral=True
            )

    class IntroFormatView(View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(self.CopyIntroButton())

    # ---------- SUGGESTION MODAL AND BUTTON CLASSES ----------

    class SuggestionModal(Modal, title="Submit a Suggestion"):
        suggestion_title = TextInput(
            label="Suggestion Title",
            style=discord.TextStyle.short,
            placeholder="A concise title for your suggestion...",
            required=True,
            max_length=256
        )
        suggestion_details = TextInput(
            label="Suggestion Details",
            style=discord.TextStyle.paragraph,
            placeholder="Provide more details about your suggestion here...",
            required=True,
            max_length=1500
        )

        async def on_submit(self, interaction: discord.Interaction):
            log_channel = self.view.bot.get_channel(LOG_CHANNEL_ID)

            if not log_channel:
                await interaction.response.send_message("‚ùå The log channel is not configured correctly. Cannot submit suggestion.", ephemeral=True)
                return

            suggest_embed = discord.Embed(
                title=f"üí° New Suggestion: {self.suggestion_title.value}",
                description=self.suggestion_details.value,
                color=discord.Color.gold()
            )
            suggest_embed.set_author(name=f"Suggested by {interaction.user.display_name}", icon_url=interaction.user.avatar.url if interaction.user.avatar else discord.Embed.Empty)
            suggest_embed.set_footer(text=f"User ID: {interaction.user.id}")
            suggest_embed.timestamp = datetime.now()

            try:
                await log_channel.send(embed=suggest_embed)
                await interaction.response.send_message("‚úÖ Your suggestion has been submitted to the staff!", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("‚ùå I don't have permission to send suggestions to the log channel. Please contact an admin.", ephemeral=True)
            except Exception as e:
                await interaction.response.send_message(f"‚ùå An error occurred while submitting your suggestion. Please try again later.", ephemeral=True)
                if log_channel:
                    await log_channel.send(f"‚ùå An error occurred trying to send a suggestion: {e}")

    class SuggestButton(Button):
        def __init__(self):
            super().__init__(label="Submit Suggestion", style=discord.ButtonStyle.blurple, custom_id="submit_suggestion_button")

        async def callback(self, interaction: discord.Interaction):
            await interaction.response.send_modal(self.view.SuggestionModal(self.view))

    class SuggestPromptView(View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(self.SuggestButton())

    # --- UTILITY COMMANDS ---

    @commands.hybrid_command(name='afk')
    @commands.is_owner()
    async def afk(self, ctx, reason: str = "AFK"):
        await self.delete_command_message(ctx)
        await ctx.author.edit(nick=f'[AFK] {ctx.author.display_name}')
        await ctx.send(f'{ctx.author.display_name} is now AFK: {reason}')

    @commands.hybrid_command(name='lockletters', description='Lock channel to only allow letters')
    @commands.is_owner()
    async def lockletters(self, ctx):
        await self.delete_command_message(ctx)
        self.bot.locked_channels[ctx.channel.id] = "letters"
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üîí Channel {ctx.channel.mention} is now locked to **letters only**.")
        else:
            await ctx.send("üîí This channel is now locked to **letters only**.", ephemeral=True)

    @commands.hybrid_command(name='locknumbers', description='Lock channel to only allow numbers')
    @commands.is_owner()
    async def locknumbers(self, ctx):
        await self.delete_command_message(ctx)
        self.bot.locked_channels[ctx.channel.id] = "numbers"
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üîí Channel {ctx.channel.mention} is now locked to **numbers only**.")
        else:
            await ctx.send("üîí This channel is now locked to **numbers only**.", ephemeral=True)

    @commands.hybrid_command(name='unlockchannel', description='Unlocks a previously locked channel')
    @commands.is_owner()
    async def unlockchannel(self, ctx):
        await self.delete_command_message(ctx)
        self.bot.locked_channels.pop(ctx.channel.id, None)
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üîì Channel {ctx.channel.mention} is now unlocked.")
        else:
            await ctx.send("üîì This channel is now unlocked.", ephemeral=True)

    @commands.hybrid_command(name="poll", description="Create a reaction-based poll")
    @commands.is_owner()
    async def poll(self, ctx, question: str, options: str):
        await self.delete_command_message(ctx)
        opts = [opt.strip() for opt in options.split('|') if opt.strip()]
        if len(opts) < 2:
            await ctx.send("‚ùå You must provide at least 2 options separated by |")
            return
        if len(opts) > 9:
            await ctx.send("‚ùå You can only have up to 9 options.")
            return

        emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]

        description = ""
        for i, option in enumerate(opts):
            description += f"{emojis[i]} {option}\n"

        embed = discord.Embed(
            title=f"üìä {question}",
            description=description,
            color=discord.Color.blue()
        )
        embed.set_footer(text=f"Poll created by {ctx.author.display_name}")

        poll_message = await ctx.send(embed=embed)

        for i in range(len(opts)):
            await poll_message.add_reaction(emojis[i])

    @commands.hybrid_command(name='sendintroformat', description='Sends an embed with a template for introductions.')
    @commands.is_owner()
    async def sendintroformat(self, ctx):
        await self.delete_command_message(ctx)
        intro_embed = discord.Embed(
            title="üìù Introduction Format",
            description="Please use the following format to introduce yourself!",
            color=discord.Color.blue()
        )
        intro_embed.add_field(name="Name:", value="`Your Name Here`", inline=False)
        intro_embed.add_field(name="Age:", value="`Your Age Here`", inline=False)
        intro_embed.add_field(name="Pro-Nouns:", value="`Your Pronouns Here`", inline=False)
        intro_embed.add_field(name="Gender:", value="`Your Gender Here`", inline=False)
        intro_embed.add_field(name="Likes:", value="`Things you like`", inline=False)
        intro_embed.add_field(name="Dislikes:", value="`Things you dislike`", inline=False)
        intro_embed.add_field(name="DM Status:", value="`Open, Ask, or Closed`", inline=False)
        intro_embed.add_field(name="Little info abt me:", value="`A short bio about yourself`", inline=False)
        intro_embed.set_footer(text="Copy and paste this format to introduce yourself!")

        await ctx.send(embed=intro_embed, view=self.IntroFormatView())
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send("Introduction format sent with copy button!")
        else:
            await ctx.send("Introduction format sent with copy button!", ephemeral=True)

    @commands.hybrid_command(name='update', description='Sends an embed with an update message.')
    @commands.is_owner()
    async def update(self, ctx, *, message: str):
        await self.delete_command_message(ctx)
        update_embed = discord.Embed(
            title="üì¢ **Update**",
            description=message,
            color=discord.Color.gold()
        )
        update_embed.set_footer(text=f"Update by {ctx.author.display_name} at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        update_channel = self.bot.get_channel(UPDATE_CHANNEL_ID)
        if update_channel:
            try:
                await update_channel.send(embed=update_embed)
                log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
                if log_channel:
                    await log_channel.send(f"Update message sent to {update_channel.mention}!")
                else:
                    await ctx.send(f"Update message sent to {update_channel.mention}!", ephemeral=True)
            except discord.Forbidden:
                log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
                if log_channel:
                    await log_channel.send(f"‚ùå I don't have permission to send messages in the update channel ({update_channel.mention}).")
                else:
                    await ctx.send(f"‚ùå I don't have permission to send messages in the update channel ({update_channel.mention}).", ephemeral=True)
            except Exception as e:
                log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
                if log_channel:
                    await log_channel.send(f"‚ùå An error occurred while sending update to {update_channel.mention}: {e}")
                else:
                    await ctx.send(f"‚ùå An error occurred while sending update: {e}", ephemeral=True)
        else:
            log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚ùå Update channel with ID {UPDATE_CHANNEL_ID} not found. Please ensure the ID is correct and the bot has access.")
            else:
                await ctx.send(f"‚ùå Update channel with ID {UPDATE_CHANNEL_ID} not found.", ephemeral=True)

    @commands.hybrid_command(name='say', description='Sends a custom message in an embed to a specified channel.')
    @commands.is_owner()
    async def say(self, ctx, channel: discord.TextChannel, *, message: str):
        await self.delete_command_message(ctx)
        say_embed = discord.Embed(
            description=message,
            color=discord.Color.blue()
        )
        say_embed.set_footer(text=f"Message sent by {ctx.author.display_name}")

        try:
            await channel.send(embed=say_embed)
            log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚úÖ Message sent to {channel.mention} by {ctx.author.display_name}.")
            else:
                await ctx.send(f"‚úÖ Message sent to {channel.mention}!", ephemeral=True)
        except discord.Forbidden:
            log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚ùå I don't have permission to send messages in {channel.mention}.")
            else:
                await ctx.send(f"‚ùå I don't have permission to send messages in {channel.mention}.", ephemeral=True)
        except Exception as e:
            log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚ùå An error occurred while sending message to {channel.mention}: {e}")
            else:
                await ctx.send(f"‚ùå An error occurred while sending message: {e}", ephemeral=True)

    @commands.hybrid_command(name='suggest', description='Sends a message with a button to submit suggestions.')
    @commands.is_owner()
    async def suggest(self, ctx):
        await self.delete_command_message(ctx)

        suggest_channel = self.bot.get_channel(SUGGESTION_CHANNEL_ID)
        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)

        if not suggest_channel:
            if log_channel:
                await log_channel.send(f"‚ùå Suggestion channel with ID {SUGGESTION_CHANNEL_ID} not found for /suggest command.")
            await ctx.send(f"‚ùå The suggestion channel is not configured correctly. Please contact an admin.", ephemeral=True)
            return

        suggest_prompt_embed = discord.Embed(
            title="‚ú® Have a Suggestion?",
            description=(
                "Click the button below to open a form and submit your ideas for the server!\n\n"
                "All suggestions will be reviewed by staff."
            ),
            color=discord.Color.blue()
        )
        suggest_prompt_embed.set_footer(text="Your feedback helps us improve!")

        view = self.SuggestPromptView()

        try:
            await suggest_channel.send(embed=suggest_prompt_embed, view=view)
            if log_channel:
                await log_channel.send(f"‚úÖ Suggestion prompt sent by {ctx.author.display_name} to {suggest_channel.mention}.")
            await ctx.send(f"‚úÖ Suggestion prompt sent to {suggest_channel.mention}!", ephemeral=True)
        except discord.Forbidden:
            if log_channel:
                await log_channel.send(f"‚ùå Bot lacks permission to send suggestion prompt in {suggest_channel.mention}.")
            await ctx.send("‚ùå I don't have permission to send messages in the suggestion channel. Please contact an admin.", ephemeral=True)
        except Exception as e:
            if log_channel:
                await log_channel.send(f"‚ùå An error occurred while sending suggestion prompt: {e}")
            await ctx.send(f"‚ùå An error occurred while sending the suggestion prompt. Please try again later.", ephemeral=True)

    @commands.hybrid_command(name='dmuser', description='DM a specific user through the bot.')
    @commands.is_owner()
    async def dmuser(self, ctx, user: discord.Member, *, message: str):
        await self.delete_command_message(ctx)
        try:
            await user.send(f"**Message from {ctx.author.display_name}:** {message}")
            await ctx.send(f"‚úÖ Message sent to {user.display_name}.", ephemeral=True)
        except discord.Forbidden:
            await ctx.send(f"‚ùå Could not send a DM to {user.display_name}. They may have DMs disabled.", ephemeral=True)
        except Exception as e:
            await ctx.send(f"‚ùå An error occurred while sending the DM: {e}", ephemeral=True)

    @commands.Cog.listener()
    async def on_message(self, message):
        """
        Handles AFK and other message-based events.
        """
        if message.author.id == self.bot.user.id:
            return

        # AFK Check
        if message.guild:
            if '[AFK]' in message.author.display_name and message.author.id == message.author.id:
                new_nick = message.author.display_name.replace('[AFK]', '').strip()
                try:
                    await message.author.edit(nick=new_nick)
                    await message.channel.send(f"Welcome back, {message.author.display_name}! You are no longer AFK.")
                except discord.Forbidden:
                    pass

async def setup(bot):
    await bot.add_cog(UtilityCog(bot))