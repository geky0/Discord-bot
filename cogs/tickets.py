# -*- coding: utf-8 -*-
"""cogs/tickets.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CgrNLmXJlHnaW5HSAQW6cEE4CT3u0rQx
"""

# cogs/tickets.py

import discord
from discord.ext import commands
from discord.ui import Button, View
from discord.utils import get
import io
import asyncio
from config import TICKET_CATEGORY_ID, OWNER_ID, LOG_CHANNEL_ID

class VerifyButton(Button):
    def __init__(self):
        super().__init__(label="‚úÖ Verify", style=discord.ButtonStyle.green, custom_id="verify_button")

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        if interaction.user.id in self.view.bot.user_tickets:
            await interaction.followup.send(
                "‚ùå You already have a verification ticket open!",
                ephemeral=True
            )
            return

        category = get(interaction.guild.categories, id=TICKET_CATEGORY_ID)
        if not category:
            await interaction.followup.send("‚ùå The ticket category was not found. Please contact an admin.", ephemeral=True)
            return

        self.view.bot.ticket_counter += 1
        ticket_name = f"verify-{self.view.bot.ticket_counter}"

        try:
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(view_channel=False),
                interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                interaction.guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
            }
            ticket_channel = await category.create_text_channel(name=ticket_name, overwrites=overwrites)
            self.view.bot.user_tickets[interaction.user.id] = ticket_channel.id

            embed = discord.Embed(
                title="üõÇ Verification Ticket",
                description="Please type your **age** and **birth year** below.\n\n"
                            "An admin will review and verify you shortly.",
                color=discord.Color.green()
            )
            view = CloseTicketView(self.view.bot, interaction.user.id)
            owner_mention = f"<@{OWNER_ID}>"

            await ticket_channel.send(
                content=f"{owner_mention} A new verification ticket has been opened!",
                embed=embed,
                view=view
            )

            log_channel = self.view.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚úÖ Verification ticket created for {interaction.user.mention}: {ticket_channel.mention}")

            await interaction.followup.send(
                f"‚úÖ Your verification ticket has been created: {ticket_channel.mention}",
                ephemeral=True
            )
        except discord.Forbidden:
            log_channel = self.view.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚ùå Bot lacks permission to create a ticket in category with ID {TICKET_CATEGORY_ID}.")
            await interaction.followup.send("‚ùå I don't have permission to create tickets. Please contact an admin.", ephemeral=True)
        except Exception as e:
            log_channel = self.view.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚ùå An unexpected error occurred while creating a ticket: {e}")
            await interaction.followup.send("‚ùå An unexpected error occurred. Please try again later.", ephemeral=True)

class CloseButton(Button):
    def __init__(self, bot, user_id):
        super().__init__(label="üîí Close", style=discord.ButtonStyle.red, custom_id=f"close_ticket_{user_id}")
        self.bot = bot

    async def callback(self, interaction: discord.Interaction):
        try:
            user_id_str = interaction.data['custom_id'].split('_')[2]
            user_id = int(user_id_str)
        except (IndexError, ValueError):
            await interaction.response.send_message("‚ùå Error: Could not identify the ticket owner from the button.", ephemeral=True)
            return

        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå Only admins can close tickets.",
                ephemeral=True
            )
            return

        channel = interaction.channel
        self.bot.user_tickets.pop(user_id, None)

        transcript = ""
        async for msg in channel.history(limit=None, oldest_first=True):
            transcript += f"[{msg.created_at}] {msg.author}: {msg.content}\n"

        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            file = discord.File(io.BytesIO(transcript.encode()), filename=f"{channel.name}-transcript.txt")
            await log_channel.send(f"üìú Transcript for {channel.name}", file=file)

        await interaction.response.send_message("‚úÖ Closing ticket...", ephemeral=True)
        await asyncio.sleep(1)
        await channel.delete()

class VerifyPromptView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(VerifyButton())

class CloseTicketView(View):
    def __init__(self, bot, user_id):
        super().__init__(timeout=None)
        self.add_item(CloseButton(bot, user_id))

class TicketsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name='verify', description='Send verification message')
    @commands.is_owner()
    async def verify(self, ctx):
        await self.delete_command_message(ctx)
        embed = discord.Embed(
            title="üîí Server Verification",
            description="To verify, click the button below to open a private ticket.",
            color=discord.Color.blurple()
        )
        view = VerifyPromptView()
        await ctx.send(embed=embed, view=view)

    async def delete_command_message(self, ctx):
        try:
            await ctx.message.delete()
        except discord.Forbidden:
            pass # Ignore if bot can't delete the message

async def setup(bot):
    await bot.add_cog(TicketsCog(bot))