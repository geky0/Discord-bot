# -*- coding: utf-8 -*-
"""bot.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ItLnMFWz7hcDEFZb5R1d2aNt6GbT6oge
"""

# bot.py

import discord
from discord.ext import commands
from discord.ext.commands import Bot
import os
import asyncio
from config import BOT_TOKEN, OWNER_ID
from discord.ui import View
from cogs.roles import ColorRoleView, LittleAgeRoleView, GenderRoleView, RealAgeRoleView, OtherRoleView
from cogs.utility import AnonymousPromptView, IntroFormatView, SuggestPromptView
from cogs.tickets import VerifyPromptView, CloseTicketView

# Define the intents your bot will use
intents = discord.Intents.all()
# bot = Bot(command_prefix='!', intents=intents, owner_id=OWNER_ID)
bot = commands.Bot(command_prefix='!', intents=intents)

# Dictionary to store user warning counts (not persistent across restarts)
bot.user_warnings = {}

# Pre-populate locked_channels with the specified IDs
bot.locked_channels = {
    1400173991544754378: "numbers",
    1399540004799119449: "letters"
}
bot.ticket_counter = 0
bot.user_tickets = {}

# List of cogs to load
cogs_list = [
    "cogs.moderation",
    "cogs.roles",
    "cogs.tickets",
    "cogs.utility"
]

# This event is triggered when the bot successfully connects to Discord.
@bot.event
async def on_ready():
    """
    Handles the bot's readiness event.
    Loads cogs and sets up persistent views.
    """
    print(f'Logged in as {bot.user.name}')
    print(f'Bot ID: {bot.user.id}')
    print('------')

    # Load Cogs
    for cog_name in cogs_list:
        try:
            await bot.load_extension(cog_name)
            print(f"Loaded {cog_name}")
        except Exception as e:
            print(f"Failed to load {cog_name}: {e}")

    # Add persistent views
    bot.add_view(VerifyPromptView())
    bot.add_view(CloseTicketView(0))
    bot.add_view(AnonymousPromptView())
    bot.add_view(IntroFormatView())
    bot.add_view(SuggestPromptView())
    bot.add_view(ColorRoleView())
    bot.add_view(LittleAgeRoleView())
    bot.add_view(GenderRoleView())
    bot.add_view(RealAgeRoleView())
    bot.add_view(OtherRoleView())
    print("Persistent views are loaded.")

    await bot.tree.sync()
    print("Commands synced globally.")


# Helper function to delete the command message
async def delete_command_message(ctx):
    try:
        await ctx.message.delete()
    except discord.Forbidden:
        print(f"DEBUG: Bot lacks permission to delete message in {ctx.channel.name} ({ctx.channel.id})")
    except discord.HTTPException as e:
        print(f"DEBUG: An error occurred while deleting message: {e}")

# ---------- GENERAL BOT EVENTS AND COMMANDS ----------

@bot.hybrid_command(name='reload')
@commands.is_owner()
async def reload(ctx):
    await delete_command_message(ctx)
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    if log_channel:
        await log_channel.send("Reloading...")
    else:
        await ctx.send("Reloading...", ephemeral=True)

    for cog_name in cogs_list:
        try:
            await bot.reload_extension(cog_name)
            print(f"Reloaded {cog_name}")
        except Exception as e:
            print(f"Failed to reload {cog_name}: {e}")

    if log_channel:
        await log_channel.send("Reloaded all cogs.")
    else:
        await ctx.send("Reloaded all cogs.", ephemeral=True)

# Run the bot with your token
if __name__ == "__main__":
    bot.run(BOT_TOKEN)